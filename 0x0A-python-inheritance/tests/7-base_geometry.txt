# tests/7-base_geometry.txt

# Importing the BaseGeometry class
>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
>>> bg = BaseGeometry()

# Testing the area method (Expecting an Exception)
>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line 9, in area
    raise Exception('area() is not implemented')
Exception: area() is not implemented

# Testing integer_validator with a valid integer
>>> bg.integer_validator("my_int", 12)

# Testing integer_validator with a valid integer (width > 0)
>>> bg.integer_validator("width", 89)

# Testing integer_validator with a non-integer value (Expecting a TypeError)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line 17, in integer_validator
    raise TypeError('{} must be an integer'.format(name))
TypeError: name must be an integer

# Testing integer_validator with a non-positive integer (Expecting a ValueError)
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line 19, in integer_validator
    raise ValueError('{} must be greater than 0'.format(name))
ValueError: age must be greater than 0

# Testing integer_validator with a negative integer (Expecting a ValueError)
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line 19, in integer_validator
    raise ValueError('{} must be greater than 0'.format(name))
ValueError: distance must be greater than 0
